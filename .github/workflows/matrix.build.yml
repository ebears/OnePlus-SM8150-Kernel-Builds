name: "üèóÔ∏èBuild Kernels"
on:
  workflow_dispatch:
    inputs:
      kernel_source_url:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/yaap/kernel_oneplus_sm8150'
      kernel_branch:
        description: 'Source branch'
        required: true
        default: 'sixteen'
      kernel_defconfig:
        description: 'defconfig file'
        required: true
        default: 'gulch_defconfig'
      clang_commit:
        description: 'Shortened clang commit hash'
        required: true
        default: 'r547379'
      clang_version:
        description: 'Clang binary version'
        required: true
        default: '20'
# NOT COMPATIBLE with workflow_dispatch inputs above.
#   schedule:
#     # http://crontab.guru
#     # Runs at 7:00 PM UTC, on the 1st and 15th of every month
#     - cron: "0 19 1,15 * *"

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: true # Ensure the release job runs even part of the build job fails
    strategy:
      fail-fast: false # Ensure in-progress and queued jobs in the matrix continue if other jobs fails
      matrix:
        kernel_variant:
          - name: "#Ô∏è‚É£KernelSU-Rissu"
            tag: "KernelSU-Rissu"
            setup_script: "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh"
            setup_arg: "main"
            dir_name: "KernelSU"
          - name: "‚òØÔ∏èKernelSU-Next"
            tag: "KernelSU-Next"
            setup_script: "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh"
            setup_arg: ""
            dir_name: "KernelSU-Next"
          - name: "üòºSukiSU-Ultra"
            tag: "SukiSU-Ultra"
            setup_script: "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh"
            setup_arg: "nongki"
            dir_name: "KernelSU"
        susfs: [true, false]

    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      KERNEL_CMDLINE: "CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip LLVM=1 LLVM_IAS=1 O=out"
      SUSFS_OUTPUT_NAME_SUFFIX: ${{ matrix.susfs && '_SusFS' || '' }}

    steps:
    - name: "üóÉÔ∏èCcache"
      # https://github.com/ccache/ccache
      uses: hendrikmuhs/ccache-action@v1
    - name: "üí•Install APT package dependencies"
      run: |
        # Remove pre-installed stuff we don't need
        echo "Removing unneeded pre-installed packages..."
        sudo rm -rf /opt/ghc "/usr/local/share/boost" /usr/share/dotnet "$AGENT_TOOLSDIRECTORY"

        # Update package repos and install requirements 
        echo "Installing required packages..."
        sudo apt-get update -y
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libelf-dev libarchive-tools lld llvm make python3 libssl-dev build-essential bc bison flex unzip xz-utils mkbootimg cpio device-tree-compiler git
    - name: "üë£Git clone and prepare AnyKernel folder"
      run: |
        echo "Cloning AnyKernel3 (walkonbothsides repo)..."
        git clone https://github.com/walkonbothsides/AnyKernel3 -b oneplus7 --depth=1 AnyKernel3
        rm -rf AnyKernel3/.git
    - name: "‚öôÔ∏èSet up Clang"
      run: |
        echo "Setting up AOSP Clang..."
        mkdir -p toolchains/aosp-clang
        cd toolchains/aosp-clang

        # First, clone an empty AOSP Clang repo...
        echo "Cloning AOSP Clang repo..."
        git clone --filter=blob:none --sparse -b main https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 .

        # ... And sparse checkout only the required version of Clang (saves A LOT of time and space)
        echo "Sparse checkout of Clang..."
        git sparse-checkout set clang-${{ github.event.inputs.clang_commit }}
    - name: "üëØ‚Äç‚ôÄÔ∏èClone kernel source"
      run: |
        echo "Cloning kernel source..."
        git clone --depth=1 --branch "${{ github.event.inputs.kernel_branch }}" "${{ github.event.inputs.kernel_source_url }}" kernel-source
        cd kernel-source && git submodule update --init --recursive
    - name: "üõ†Ô∏èApply KernelSU patches"
      # https://kernelsu.org/guide/how-to-integrate-for-non-gki.html
      run: |
        echo "Applying KernelSU patches for ${{ matrix.kernel_variant.tag }}..."
        cd kernel-source

        # kernelsu.patch is provided by the YAAP kernel source
        # Reference: https://kernelsu.org/guide/how-to-integrate-for-non-gki.html#manually-modify-the-kernel-source
        echo "Applying kernelsu.patch from YAAP kernel source..."
        patch -p1 < kernelsu.patch

        # Download and apply path_umount.patch to backport umount functionality necessary for KernelSU
        # Reference: https://kernelsu.org/guide/how-to-integrate-for-non-gki.html#how-to-backport-path-umount
        echo "Applying path_umount.patch to backport umount functionality..."
        wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/path_umount.patch
        patch -p1 < path_umount.patch

        # curl the script to set up KernelSU variant
        echo "Running setup script for ${{ matrix.kernel_variant.tag }}..."
        curl -LSs "${{ matrix.kernel_variant.setup_script }}" | bash -s "${{ matrix.kernel_variant.setup_arg }}"

        # Add necessary configurations to the kernel defconfig
        #    Enable KSU
        echo "Enabling KSU in defconfig..."
        echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        #    Disable kprobes and enable manual hooking (since we used kernelsu.patch from YAAP source)
        echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        if [ "${{ matrix.kernel_variant.tag }}" == "SukiSU-Ultra" ]; then
          # SukiSU-Ultra requires this for KPM functionality (WIP -- NEED TO PATCH KERNEL)
          # Reference: https://github.com/SukiSU-Ultra/SukiSU-Ultra#kpm-support
          echo "Enabling KPM support in defconfig for SukiSU-Ultra..."
          echo "CONFIG_KPM=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
          # Already enabled in YAAP source
          # echo "CONFIG_KALLSYMS" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
          echo "CONFIG_KALLSYMS_ALL=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}

          # Apply backport patch for set_memory() changes in Linux 4.19
          echo "Applying set_memory.h backport patch for SukiSU-Ultra..."
          # Patch from here: https://github.com/hotianbexuanto/NonGKI_Kernel_Build/blob/main/Patches/backport_set_memory.patch
          wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/backport_set_memory.patch
          patch -p1 < backport_set_memory.patch
        else
          echo "Kernel (${{ matrix.kernel_variant.tag }}) doesn't include KPM support; skipping KPM config..."
        fi
    - name: "üïµÔ∏è‚Äç‚ôÄÔ∏èApply SusFS (if enabled)"
      if: matrix.susfs
      run: |
        echo "Applying SusFS patches..."
        cd kernel-source
        echo "Cloning simonpunk/susfs4ksu repo..."
        git clone --depth=1 --branch kernel-4.14 https://gitlab.com/simonpunk/susfs4ksu.git susfs4ksu

        # Enable SusFS patches; including Magic Mount support.
        # Disabled SUS Path and Open Redirect since they are experimental and may cause instability.
        echo "Enabling SusFS in defconfig..."
        echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}
        echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./arch/arm64/configs/${{ github.event.inputs.kernel_defconfig }}

        # Copy necessary SusFS patches to the kernel source
        # https://gitlab.com/simonpunk/susfs4ksu/-/blob/kernel-4.14/README.md
        echo "Copying SusFS files to kernel source..."
        cp susfs4ksu/kernel_patches/fs/* fs/
        cp susfs4ksu/kernel_patches/include/linux/* include/linux/
        if [ "${{ matrix.kernel_variant.tag }}" == "KernelSU-Rissu" ]; then
          # We can skip patching SusFS for KernelSU since the Rissu fork already has a compatible branch
          echo "Setting up SusFS for KernelSU-Rissu..."
          echo "Cloning susfs-legacy branch..."
          curl -LSs "${{ matrix.kernel_variant.setup_script }}" | bash -s susfs-main
        elif [ "${{ matrix.kernel_variant.tag }}" == "KernelSU-Next" ]; then
          # We need to apply SusFS patches
          # Lightly modified patch from: https://github.com/WildKernels/kernel_patches/tree/main/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch
          export SUSFS_PATCH_NAME="0001-kernel-implement-susfs-v1.5.8-KernelSU-Next.patch"
          echo "Setting up SusFS for KernelSU-Next..."
          echo "Applying SusFS patch for KernelSU-Next..."
          cd KernelSU-Next
          echo "Downloading KernelSU-Next SusFS patch..."
          # wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/$SUSFS_PATCH_NAME
          # echo "Applying patch: $SUSFS_PATCH_NAME ..."
          # patch -p1 < $SUSFS_PATCH_NAME
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.8/fix_apk_sign.c.patch
          patch -p1 < fix_apk_sign.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.8/fix_core_hook.c.patch
          patch -p1 < fix_core_hook.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.8/fix_ksud.c.patch
          patch -p1 < fix_ksud.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.8/fix_selinux.c.patch
          patch -p1 < fix_selinux.c.patch
          rm fix_apk_sign.c.patch fix_core_hook.c.patch fix_ksud.c.patch fix_selinux.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.9/fix_apk_sign.c.patch
          patch -p1 < fix_apk_sign.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch
          patch -p1 < fix_core_hook.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch
          patch -p1 < fix_kernel_compat.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.9/fix_rules.c.patch
          patch -p1 < fix_rules.c.patch
          wget https://raw.githubusercontent.com/WildKernels/kernel_patches/refs/heads/main/next/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch
          patch -p1 < fix_sucompat.c.patch
          cd ..
        elif [ "${{ matrix.kernel_variant.tag }}" == "SukiSU-Ultra" ]; then
          # Again, applying SusFS patches
          # Lightly modified patch from: https://github.com/WildKernels/kernel_patches/tree/main/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch
          export SUSFS_PATCH_NAME="0001-kernel-implement-susfs-v1.5.5-v1.5.7-SukiSU.patch"
          echo "Setting up SusFS for SukiSU-Ultra..."
          echo "Applying SusFS patch for SukiSU-Ultra..."
          cd KernelSU
          echo "Downloading SukiSU-Ultra SusFS patch..."
          wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/$SUSFS_PATCH_NAME
          echo "Applying patch: $SUSFS_PATCH_NAME ..."
          patch -p1 < $SUSFS_PATCH_NAME
          cd ..
        else
          echo "Unsupported KernelSU variant for SusFS patching: ${{ matrix.kernel_variant.tag }}. Skipping..."
        fi

        # Download and apply SusFS patches to the kernel source
        echo "Downloading SusFS patches for the kernel source..."
        wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/50_add_susfs_in_kernel-for-kernel-4.14.patch
        echo "Applying SusFS patch to the kernel source..."
        patch -p1 < 50_add_susfs_in_kernel-for-kernel-4.14.patch

        # Apply updates to SusFS
        # Reference: https://github.com/JackA1ltman/NonGKI_Kernel_Build_2nd/tree/mainline/Patches/Patch
        echo "Downloading susfs_upgrade_to_157.patch..."
        wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/susfs_upgrade_to_157.patch
        echo "Applying susfs_upgrade_to_157.patch..."
        patch -p1 < susfs_upgrade_to_157.patch

        echo "Downloading susfs_upgrade_to_158_4.14.patch..."
        wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/susfs_upgrade_to_158_4.14.patch
        echo "Applying susfs_upgrade_to_158_4.14.patch..."
        patch -p1 < susfs_upgrade_to_158_4.14.patch

        echo "Downloading susfs_upgrade_to_159.patch..."
        wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/susfs_upgrade_to_159.patch
        echo "Applying susfs_upgrade_to_159.patch..."
        patch -p1 < susfs_upgrade_to_159.patch

        echo "Downloading susfs_upgrade_to_1510_4.14.patch..."
        wget https://raw.githubusercontent.com/ebears/OnePlus-SM8150-Kernel-Builds/refs/heads/main/patches/susfs_upgrade_to_1510_4.14.patch
        echo "Applying susfs_upgrade_to_1510_4.14.patch..."
        patch -p1 < susfs_upgrade_to_1510_4.14.patch
    # START error handling
    # Error handling for patching
    - name: ‚ö†Ô∏èSearch for patch errors
      if: failure()
      run: |
        echo "One or more patching steps failed; searching for .rej files to upload..."
        mkdir rej_files
        find . -name "*.rej" -exec cp {} rej_files/ \;
    - name: üì§Upload any found patch rejects
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: patch-rejects
        path: rej_files/
    # END error handling

    - name: "üë∑‚Äç‚ôÄÔ∏èBuild kernel"
      run: |
        echo "Building kernel..."
        export PATH=$(pwd)/toolchains/aosp-clang/clang-${{ github.event.inputs.clang_commit }}/bin/:$PATH
        export ARCH=arm64 && export SUBARCH=arm64 && export LD=ld.lld
        cd kernel-source
        echo "Using defconfig: ${{ github.event.inputs.kernel_defconfig }}"
        echo "Kernel variant: ${{ matrix.kernel_variant.name }}${{ env.SUSFS_OUTPUT_NAME_SUFFIX }}"
        echo "Clang commit: ${{ github.event.inputs.clang_commit }} (version ${{ github.event.inputs.clang_version }})"
        echo "SusFS enabled: ${{ matrix.susfs }}"
        echo "Ccache stats before build:"
        ccache -s
        echo "Starting kernel build..."
        make $KERNEL_CMDLINE ${{ github.event.inputs.kernel_defconfig }} CC="ccache clang-${{ github.event.inputs.clang_version }}"
        make $KERNEL_CMDLINE -j$(nproc --all) CC="ccache clang-${{ github.event.inputs.clang_version }}"
    - name: "üì¶Create AnyKernel3 ZIP"
      run: |
        # SukiSU-Ultra KPM support steps from here:
        # https://github.com/YangQi0408/kernel_xiaomi_sm8250_mod/blob/41d6929480426e0bbdc6697fe692c14d3cfc8014/build.sh#L68
        echo "Packaging kernel into AnyKernel3 ZIP..."
        mkdir -p AnyKernel3/kernels
        if [ "${{ matrix.kernel_variant.tag }}" == "SukiSU-Ultra" ]; then
          # Patch for SukiSU KPM support
          echo "Applying SukiSU-Ultra KPM patch to the kernel image..."
          cd kernel-source/out/arch/arm64/boot/
          echo "Downloading patch_linux tool..."
          # Patch from here: https://github.com/hotianbexuanto/NonGKI_Kernel_Build/blob/main/.github/workflows/build_kernel_op8_oos13.1_a13_realking.yml
          wget https://raw.githubusercontent.com/JackA1ltman/NonGKI_Kernel_Patches/refs/heads/op_kernel/patch_linux
          chmod +x patch_linux
          echo "Patching kernel Image for KPM support..."
          ./patch_linux
          rm Image
          mv oImage Image
          cd ../../../../..
        else
          echo "KPM not supported for ${{ matrix.kernel_variant.tag }}; skipping KPM patch..."
        fi
        echo "Copying kernel image to AnyKernel3 folder..."
        cp kernel-source/out/arch/arm64/boot/Image AnyKernel3/kernels/
        cd AnyKernel3
        echo "Creating ZIP file: OnePlus-SM8150_YAAP-16_${{ matrix.kernel_variant.tag }}${{ env.SUSFS_OUTPUT_NAME_SUFFIX }}.zip"
        zip -r9 OnePlus-SM8150_YAAP-16_${{ matrix.kernel_variant.tag }}${{ env.SUSFS_OUTPUT_NAME_SUFFIX }}.zip * -x .git .gitignore
    - name: "üå¨Ô∏èUpload artifact"
      uses: actions/upload-artifact@v4
      with:
        name: OnePlus-SM8150_YAAP-16_${{ matrix.kernel_variant.tag }}${{ env.SUSFS_OUTPUT_NAME_SUFFIX }}
        path: "AnyKernel3/OnePlus-SM8150_YAAP-16_${{ matrix.kernel_variant.tag }}${{ env.SUSFS_OUTPUT_NAME_SUFFIX }}.zip"
        retention-days: 2
  release:
    name: "üçäAggregate and publish"
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: "üí´Download all build artifacts"
      uses: actions/download-artifact@v5
      with:
        path: release-artifacts
    - name: "ü•≥Generate release.md"
      id: generate_body
      run: |
        echo "## YAAP OnePlus SM8150 Kernel Builds v${{ github.run_number }}" > release.md
        echo "" >> release.md
        echo "üì±**Device:** OnePlus SM8150" >> release.md
        echo "‚è±Ô∏è**Target:** Android 16 (YAAP)" >> release.md
        echo "" >> release.md

        # Search our directory for kernel zip files and generate a list based matched names
        SUSFS_FOUND=0
        find release-artifacts -type f -name "*.zip" | while read -r file; do
          FILE_NAME=$(basename "$file")
          KERNEL_TAG=$(echo "$FILE_NAME" | sed -E 's/OnePlus-SM8150_YAAP-16_([^\.]+).*/\1/')
          COMMON_NAME=""
          ICON=""
          APK_LINK=""
          case "$KERNEL_TAG" in
            KernelSU-Rissu*)
              ICON="#Ô∏è‚É£"
              COMMON_NAME="KernelSU-Rissu"
              APK_LINK="[APK](https://github.com/rsuntk/KernelSU/releases/latest)"
              ;;
            KernelSU-Next*)
              ICON="‚òØÔ∏è"
              COMMON_NAME="KernelSU-Next"
              APK_LINK="[APK](https://github.com/KernelSU-Next/KernelSU-Next/releases/latest)"
              ;;
            SukiSU-Ultra*)
              ICON="üòº"
              COMMON_NAME="SukiSU-Ultra"
              APK_LINK="[APK](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases/latest)"
              ;;
            *)
              ICON="üì¶"
              COMMON_NAME="$KERNEL_TAG"
              APK_LINK=""
              ;;
          esac
          if (( KERNEL_TAG == *SusFS* )); then
            COMMON_NAME="$COMMON_NAME SusFS"
            SUSFS_FOUND=1
          fi
          echo "- $ICON $COMMON_NAME: \`$FILE_NAME\` $APK_LINK" >> release.md
        done
        if (( SUSFS_FOUND == 1 )); then
          echo "" >> release.md
          echo "üóÉÔ∏èSusFS Module: [susfs4ksu-module](https://github.com/sidex15/susfs4ksu-module)" >> release.md
        fi
        echo "body_path=release.md" >> $GITHUB_OUTPUT
    - name: "üéâCreate Final GitHub Release"
      uses: softprops/action-gh-release@v2
      with:
        name: "üéàKernel Builds v${{ github.run_number }}"
        tag_name: "build-${{ github.run_id }}"
        prerelease: false
        body_path: ${{ steps.generate_body.outputs.body_path }}
        files: release-artifacts/**/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}